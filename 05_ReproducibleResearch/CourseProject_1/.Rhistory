install_from_swirl("exploratory data analysis")
install.packages("swirl")
library(doMC)
registerDoMC(2)
getDoParWorkers()
registerDoMC()
getDoParWorkers()
registerDoMC(4)
getDoParWorkers()
library(doMC)
registerDoMC()
getDoParWorkers()
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activities)
table(ssd$activity)
sub1<-subset(ssd, 1)
sub1<-subset(ssd, boolean = 1)
sub1<-subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1<-svd(scale[,-c(562,563)])
svd1<-svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist<-dist(c(sub1[,10:12],maxCon))
mdist<-dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-563:-562], centers = 6)
kClust <- kmeans(sub1[,-c(563, 562)], centers = 6)
kClust <- kmeans(sub1[,-c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames, sep = "|", fixed = TRUE)
cnames<-strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36, county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0$Sample.Value
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0,x0sub, pch = 20)
abline(median(x0sub, na.rm = TRUE),lwd = 2)
abline(h = median(x0sub, na.rm = TRUE),lwd = 2)
plot(dates1,x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE),lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0,d1, byset = "state")
mrg <- merge(d0,d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52, mrg[,2], xlim = c(.5,2.5))))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
skip()
mrg[mrg$mean.x < mrg$mean.y]
skip()
install.packages("rmarkdown")
install.packages("broom")
install.packages("revealjs")
install.packages("kernlab")
setwd("/Users/peterweber/Dropbox/OnlineCourses/2015_DataScience_Spec/2016_ReproducibleResearch/CourseProject_1/")
file.exists("activity.csv")
if(!file.exists("activity.csv")){
unzip("repdata%2Fdata%2Factivity.zip")
}
ata <- read.csv("activity.csv")
if(!file.exists("activity.csv")){
unzip("repdata%2Fdata%2Factivity.zip")
}
data <- read.csv("activity.csv")
rm(ata)
View(data)
sum(is.na(data$steps))
View(data)
class(data[2,5])
data[2,5]
data[5,2]
class(data[5,2])
class(data$interval)
class(data$steps)
data$date <- as.Date(as.character(data$date),"%Y-%m-%d")
class(data$date)
data$date[5]
test <- aggregate(steps ~ date, data = data, FUN = mean)
View(test)
total_steps_per_day <- aggregate(steps ~ date, data = data, FUN = sum)
rm(test)
View(total_steps_per_day)
hist(total_steps_per_day)
View(total_steps_per_day)
plot(steps ~ date, data = total_steps_per_day)
barplot(steps ~ date, data = total_steps_per_day)
barplot(height(total_steps_per_day$steps))
barplot(total_steps_per_day$steps)
hist(total_steps_per_day$steps)
hist(total_steps_per_day$steps,breaks = 100)
hist(total_steps_per_day$steps,breaks = 10)
hist(total_steps_per_day$steps,breaks = 20)
hist(total_steps_per_day$steps,breaks = 53)
hist(total_steps_per_day$steps, xlab = "Total number of steps per day", breaks = 53)
hist(total_steps_per_day$steps, xlab = "Total number of steps per day", breaks = 2)
hist(total_steps_per_day$steps, xlab = "Total number of steps per day", ylab = "Frequency using 53 bins", breaks = 52)
hist(total_steps_per_day$steps, xlab = "Total number of steps per day", ylab = "Frequency using 53 bins", main = "Distribution of total steps per day", breaks = 52)
mean_total_steps_per_day <- mean(total_steps_per_day$steps)
median_total_steps_per_day <- median(total_steps_per_day$steps)
class(median_total_steps_per_day)
print("mean of total steps per day = ",mean_total_steps_per_day)
print(mean_total_steps_per_day)
print("mean of total steps per day = " + mean_total_steps_per_day)
sprintf("mean of total number of steps is  %i", mean_total_number_steps_per_day)
View(data)
mean_steps_per_interval <- aggregate(steps ~ interval, data = data, FUN = mean)
View(mean_steps_per_interval)
library(ggplot2)
qplot(interval, steps, data = mean_steps_per_interval)
g <- ggplot(mean_steps_per_interval, aes(interval, steps))
g + geom_line() + ggtitle("Steps per 5min interval averaged across all days")
interval_maximum_steps = mean_steps_per_interval$interval[which.max(mean_steps_per_interval$steps)]
sum(is.na(data$interval))
sum(is.na(data$date))
number_missing_values <- sum(is.na(data$steps))
library(impute)
install.packages("impute")
install.packages("impute.knn")
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
data_impute <- impute.knn(data)
data_impute <- impute.knn(as.matrix(data))
View(data)
View(mean_steps_per_interval)
data_impute <- data
test <- apply(data_impute[is.na(data$steps),], 1, function(x) mean_steps_per_interval$steps[mean_steps_per_interval$steps == x$interval])
test <- data_impute[is.na(data$steps),]
View(test)
test <- apply(data_impute[is.na(data$steps),], 1, function(x) x$interval)
test <- apply(data_impute[is.na(data$steps),], 2, function(x) x$interval)
test <- apply(data_impute[is.na(data$steps),], 2, function(x) x)
View(test)
test <- apply(data_impute[is.na(data$steps),], 2, function(x) x[,"interval"])
test <- apply(data_impute[is.na(data$steps),], 1, function(x) x["interval"])
test <- apply(data_impute[is.na(data$steps),], 1, function(x) int(x["interval"]))
test <- apply(data_impute[is.na(data$steps),], 1, function(x) as.numeric(x["interval"]))
imputing <- function(x){
as.numeric(x["interval"])
}
test <- apply(data_impute[is.na(data$steps),], 1, imputing
)
View(mean_steps_per_interval)
imputing <- function(x){
filter = which(mean_steps_per_interval$interval == as.numeric(x["interval"]))
mean_steps_per_interval$steps[filter]
}
test <- apply(data_impute[is.na(data$steps),], 1, imputing)
data_impute[is.na(data$steps),] <- apply(data_impute[is.na(data$steps),], 1, imputing)
test1 <- data_impute[is.na(data$steps),]
data_impute[is.na(data$steps),"steps"] <- apply(data_impute[is.na(data$steps),], 1, imputing)
View(data_impute)
test = weekday(data_impute$date)
test = weekdays(data_impute$date)
unique(test)
identical(test, "Saturday")
test == "Saturday"
sum(test == "Saturday")
classify_day <- function(x){
if((x["date"] == "Saturday") |  (x["date"] == "Sunday")){
return(as.factor("Weekend"))
}
}
data_impute$day <- apply(data_impute, 1, classify_day)
test <- apply(data_impute, 1, classify_day)
classify_day <- function(x){
if(weekdays(x["date"]) == "Saturday" |  weekdays(x["date"] == "Sunday")){
return("Weekend")
}
}
test <- apply(data_impute, 1, classify_day)
classify_day <- function(x){
if(weekdays(x["date"]) == "Saturday" |  weekdays(x["date"]) == "Sunday"){
return("Weekend")
}
}
test <- apply(data_impute, 1, classify_day)
days = weekdays(data_impute$date)
sample(days, size = 20)
classify_day <- function(x){
weekdays(x["date"])
}
test <- apply(data_impute, 1, classify_day)
class(data_impute[1,"date"])
class(data_impute$date[1])
test <- apply(data_impute$date, 1, classify_day)
classify_day <- function(x){
weekdays(x)
}
test <- apply(data_impute$date, 1, classify_day)
data_impute$date[1:20]
weekdays(data_impute$date[1:20])
classify_day <- function(x){
weekdays(x)
}
test <- apply(data_impute, 1, classify_day)
classify_day <- function(x){
class(x)
}
test <- apply(data_impute$date, 1, classify_day)
classify_day <- function(x){
class(x)
}
test <- apply(data_impute$date, 2, classify_day)
classify_day <- function(x){
class(x)
}
test <- apply(data_impute$date, classify_day)
classify_day <- function(x){
class(x)
}
test <- lapply(data_impute$date, classify_day)
classify_day <- function(x){
if(weekdays(x) == "Saturday" |  weekdays(x) == "Sunday"){
return("Weekend")
}
}
test <- lapply(data_impute$date, classify_day)
classify_day <- function(x){
if(weekdays(x) == "Saturday" |  weekdays(x) == "Sunday"){
return("Weekend")
} else {
return("Weekday")
}
}
test <- lapply(data_impute$date, classify_day)
classify_day <- function(x){
if(weekdays(x) == "Saturday" |  weekdays(x) == "Sunday"){
return("Weekend")
} else {
return("Weekday")
}
}
data_impute$day <- lapply(data_impute$date, classify_day)
View(data_impute)
class(data_impute$day[1])
class(unlist(data_impute$day[1]))
class(as.factor(unlist(data_impute$day[1])))
data_impute$day <- as.factor(unlist(data_impute$day[1]))
class(data_impute$day[1])
data_impute$day[1]
data_impute$day <- as.factor(unlist(data_impute$day))
data_impute$day[1]
data_impute$day <- lapply(data_impute$date, classify_day)
data_impute$day <- as.factor(unlist(data_impute$day))
data_impute$day[1]
mean_steps_per_interval_and_weekday <- aggregate(steps ~ interval + day, data = data_impute, FUN = mean)
g <- ggplot(mean_steps_per_interval_and_weekday, aes(interval, steps))
g + geom_line() + ggtitle("Timeseries: Steps per 5min interval averaged across all days") +
facet_grid(. ~ day)
getwd()
setwd("/Users/peterweber/Projects/Git/DataScience_CourseraSpecialization/ReproducibleResearch/CourseProject_1/C")
setwd("/Users/peterweber/Projects/Git/DataScience_CourseraSpecialization/ReproducibleResearch/CourseProject_1/")
getwd()
knit2html("CourseProject_1.Rmd")
library(knitr)
knit2html("CourseProject_1.Rmd")

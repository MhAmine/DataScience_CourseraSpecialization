pp<-preProcess(toProcess, method="pca",thresh=0.9)
pp
View(training)
names(training)
names(toProcess)
lastQuestion <- toPrcess[, names(toProcess) == "IL_1alpha" | names(toProcess) == "IL_6_Receptor"]
lastQuestion <- toProcess[, names(toProcess) == "IL_1alpha" | names(toProcess) == "IL_6_Receptor"]
lastQuestion <- cbind(training$diagnosis, toProcess)
model1 <- train(diagnosis ~., method = "glm", data = toProcess)
View(toProcess)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
toProcess = training[,grepl("^IL", names(training))]
lastQuestion <- cbind(training$diagnosis, toProcess)
model1 <- train(diagnosis ~., method = "glm", data = lastQuestion)
View(lastQuestion)
model1 <- train(training$diagnosis ~., method = "glm", data = lastQuestion)
install.packages(e1071)
install.packages("e1071")
library(e1071)
model1 <- train(training$diagnosis ~., method = "glm", data = lastQuestion)
View(lastQuestion)
colnames(lastQuestion)[1] = "diagnosis"
model1 <- train(training$diagnosis ~., method = "glm", data = lastQuestion)
model1 <- train(diagnosis ~., method = "glm", data = lastQuestion)
predict(model1, newdata = testing)
table(prediction1, testing$diagnosis)
prediction1 = predict(model1, newdata = testing)
table(prediction1, testing$diagnosis)
table(prediction1, testing$diagnosis)[1]
table(prediction1, testing$diagnosis)[2]
table(prediction1, testing$diagnosis)[3]
(table(prediction1, testing$diagnosis)[1]+table(prediction1, testing$diagnosis)[4])(sum(table(prediction1, testing$diagnosis)))
(2+51)/(2+51+9+20)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentataionOriginal)
names(segmentationOriginal)
# create training set indexes with 75% of data
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
# subset spam data to training
training <- segmentationOriginal[inTrain,]
# subset spam data (the rest) to test
testing <- segmentationOriginal[-inTrain,]
tree<-train(Case ~ ., data=training, method="rpart")
data(segmentationOriginal)
tree<-train(Case ~ ., data=training, method="rpart")
testing <- segmentationOriginal[-inTrain,]
training <- segmentationOriginal[inTrain,]
library(rattle)
install.packages("rattle")
print(modFit$finalModel)
print(tree$finalModel)
plot(tree$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
print(tree$finalModel)
rattle::fancyRpartPlot(tree$finalModel)
library(rattle)
rattle::fancyRpartPlot(tree$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
print(tree$finalModel)
rattle::fancyRpartPlot(tree$finalModel)
plot(tree$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
install.packages("RGtk2")
> library(RGtk2)
install.packages("RGtk2")
library(RGtk2)
library(rattle)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
rattle::fancyRpartPlot(tree$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
install.packages("XQuartz")
install.packages("rattle", repos="http://rattle.togaware.com", type="source”)
)
plot(tree$finalModel)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
print(tree$finalModel)
plot(tree$finalModel)
text(tree$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
print(tree$finalModel)
plot(tree$finalModel)
text(tree$finalModel)
plot(tree, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(tree, use.n=TRUE, all=TRUE, cex=.8)
plot(tree, uniform=TRUE,
main="Classification Tree for Kyphosis")
rm(list=ls())
library(rpart)
fit <- rpart(Case ~ .,
method="class", data=kyphosis)
fit <- rpart(Case ~ .,
method="class", data=training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
fit <- rpart(Case ~ .,
method="class", data=training)
plot(tree, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(tree, use.n=TRUE, all=TRUE, cex=.8)
rpart.plot(fit)
library(rpart)
install.packages("rpart.plot")
rpart.plot(fit)
library(rpart.plot)
rpart.plot(fit)
library(maptree)
install.packages("maptree")
library(maptree)
draw.tree(fit,cex=3)
draw.tree(fit,cex=1)
rpart.plot(fit)
rpart.plot(fit,cex=3)
rpart.plot(fit,cex=2)
rpart.plot(fit,cex=1)
rpart.plot(fit,cex=0.3)
draw.tree(fit,cex=0.3)
draw.tree(fit,cex=0.4
draw.tree(fit,cex=0.4)
draw.tree(fit,cex=0.4)
draw.tree(fit,cex=0.6)
rpart.plot(fit,cex=0.6)
rpart.plot(tree,cex=0.6)
rpart.plot(fit,cex=0.6)
View(training)
View(testing)
View(training)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#library(rattle)
library(rpart)
library(rpart.plot)
# create training set indexes with 75% of data
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
# subset spam data to training
training <- segmentationOriginal[inTrain,]
# subset spam data (the rest) to test
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
plot(tree, cex = 0.3)
library(pgmm)
data(olive)
olive = olive[,-1]
tree<-train(Area ~ ., data=olive, method="rpart")
pred <- predict(tree,newdata = as.data.frame(t(colMeans(olive))))
plot(tree)
print(tree)
summary(tree)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#library(rattle)
library(rpart)
library(rpart.plot)
# create training set indexes with 75% of data
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.6, list=FALSE)
# subset spam data to training
training <- segmentationOriginal[inTrain,]
# subset spam data (the rest) to test
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
plot(tree$finalModel, cex = 0.3)
text(tree$finalModel, cex = 0.3)
plot(tree$finalModel)
text(tree$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
tree<-train(Area ~ ., data=olive, method="rpart")
pred <- predict(tree,newdata = as.data.frame(t(colMeans(olive))))
plot(tree$finalModel)
text(tree$finalModel)
print(tree)
summary(tree)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit = train(trainSA, method = "glm", family = "binomial")
library(caret)
fit = train(trainSA, method = "glm", family = "binomial")
View(trainSA)
View(trainSA)
conlnames(trainSA)
colnames(trainSA)
fit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial")
fit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
fit = train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.6, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
rattle::fancyRpartPlot(tree$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.8, list=FALSE)
# subset spam data to training
training <- segmentationOriginal[inTrain,]
# subset spam data (the rest) to test
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
print(tree$finalModel)
rattle::fancyRpartPlot(tree$finalModel)
View(training)
tree
summary(tree)
View(segmentationOriginal)
inTrain <- segmentationOriginal$Case == "Train"
# subset spam data to training
training <- segmentationOriginal[inTrain,]
# subset spam data (the rest) to test
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
tree<-train(Case ~ ., data=training, method="rpart")
set.seed(125)
tree<-train(Class ~ ., data=training, method="rpart")
rattle::fancyRpartPlot(tree$finalModel)
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
fit = train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred <- predict(fit, newdata = test)
pred <- predict(fit, newdata = testSA)
View(testSA)
View(trainSA)
(testSA$chd, pred)
testSA$chd
pred
missClass(factor(testSA$chd), pred)
missClass(testSA$chd, as.numeric(pred))
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(8484)
fit = train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pred <- predict(fit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, as.numeric(pred))
set.seed(13234)
fit = train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pred <- predict(fit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, as.numeric(pred))
rm(list=ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit = train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pred <- predict(fit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, as.numeric(pred))
4
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pred <- predict(fit, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, pred)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pred_test <- predict(fit, newdata = testSA)
pred_train <- predict(fit, newdata = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, pred_train)
missClass(trainSA$chd, pred_test)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
fit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
pred_test <- predict(fit, newdata = testSA)
pred_train <- predict(fit, newdata = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, pred_train)
missClass(testSA$chd, pred_test)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit <- randomForest(y ~ ., data = vowel.train)
install.packages("randomForest")
library(randomForest)
fit <- randomForest(y ~ ., data = vowel.train)
varimp(fit)
library(caret)
varimp(fit)
varImp(fit)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
mod_rf = train(y~.,data = vowel.train, method = "rf")
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
mod_rf = train(y~.,data = vowel.train, method = "rf")
mod_gbm = train(y.~,data = vowel.test, method = "gbm")
mod_gbm = train(y~.,data = vowel.test, method = "gbm")
pred_rf = predict(mod_rf, newdata = vowel.test)
pred_gbm = predict(mod_gbm, newdata = vowel.train)
misClass(vowel.test$y, pred_rf)
missClass(vowel.test$y, pred_rf)
missClass(as.numeric(vowel.test$y), as.numeric(pred_rf))
missClass(as.numeric(vowel.test$y), as.numeric(pred_gbm))
pred_gbm = predict(mod_gbm, newdata = vowel.test)
missClass(as.numeric(vowel.test$y), as.numeric(pred_rf))
missClass(as.numeric(vowel.test$y), as.numeric(pred_gbm))
mod_rf = train(y~.,data = vowel.train, method = "rf")
mod_gbm = train(y~.,data = vowel.train, method = "gbm")
pred_rf = predict(mod_rf, newdata = vowel.test)
pred_gbm = predict(mod_gbm, newdata = vowel.test)
missClass(as.numeric(vowel.test$y), as.numeric(pred_rf))
missClass(as.numeric(vowel.test$y), as.numeric(pred_gbm))
table(vowel.test$y, pred_rf)
diag(table(vowel.test$y, pred_rf))
sum(diag(table(vowel.test$y, pred_rf)))/sum(table(vowel.test$y, pred_rf))
sum(diag(table(vowel.test$y, pred_mod)))/sum(table(vowel.test$y, pred_mod))
sum(diag(table(vowel.test$y, pred_gbm)))/sum(table(vowel.test$y, pred_gbm))
sum(diag(table(pred_rf, pred_gbm)))/sum(table(pred_rf, pred_gbm))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
set.seed(62433)
mod_1 = train(diagnosis~.,data = training, method = "rf")
mod_2 = train(diagnosis~.,data = training, method = "gbm")
mod_3 = train(diagnosis~.,data = training, method = "lda")
pred_1 = predict(mod_1, newdata = testing)
pred_2 = predict(mod_2, newdata = testing)
pred_3 = predict(mod_3, newdata = testing)
pred_all = data.frame(pred_1, pred_2, pred_3, diagnosis = testing$diagnosis)
mod = train(diagnosis ~., data = pred_all, method = "rf")
pred = predict(pred_all, newdata = testing)
pred = predict(mod, newdata = testing)
table(pred, testing$diagnosis)
sum(diag(table(pred, testing$diagnosis)))/sum(table(pred, testing$diagnosis))
sum(diag(table(pred_2, testing$diagnosis)))/sum(table(pred_2, testing$diagnosis))
sum(diag(table(pred_1, testing$diagnosis)))/sum(table(pred_1, testing$diagnosis))
# 3
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
names(training)
train(CompressiveStrength ~ ., data = training, method = "lasso")
?plot.enet
mod = train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(mod)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
model = svm(CompressiveStrength ~., data = training)
predict(model, newdata = testing)
pred =predict(model, newdata = testing)
rmse = sqrt(1/length(pred)*sum(pred - testing$CompressiveStrength)^2)
set.seed(325)
model = svm(CompressiveStrength ~., data = training)
pred =predict(model, newdata = testing)
rmse = sqrt(1/length(pred)*sum(pred - testing$CompressiveStrength)^2)
rmse = sqrt(1/length(pred)*sum((pred - testing$CompressiveStrength)^2))
